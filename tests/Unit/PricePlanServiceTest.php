<?php

namespace Tests\Unit;

use App\Exceptions\InvalidMeterIdException;
use App\Models\MeterReadingsInitialize;
use App\Services\MeterReadingService;
use App\Services\PricePlanService;
use Tests\TestCase;

class PricePlanServiceTest extends TestCase
{
    private static $meterReadingInitialize;
    private static $meterReadingService;
    private static $pricePlanService;

    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        PricePlanServiceTest::$meterReadingInitialize = new MeterReadingsInitialize();
        PricePlanServiceTest::$meterReadingService = new MeterReadingService(PricePlanServiceTest::$meterReadingInitialize);
        PricePlanServiceTest::$pricePlanService = new PricePlanService(PricePlanServiceTest::$meterReadingService, PricePlanServiceTest::$meterReadingInitialize);
    }

    /**
     * @test
     */
    public function get_Electricity_Consumption_Should_Return_Price_Plans_For_Valid_Electricity_Readings(){
        $pricePlans = PricePlanServiceTest::$pricePlanService->getConsumptionCostOfElectricityReadingsForEachPricePlan("smart-meter-1");
        $this->assertNotNull($pricePlans);
    }

    /**
     * @test
     */
    public function get_Electricity_Consumption_Should_Throw_Exception_When_Readings_Not_Available(){
        $this->expectException(InvalidMeterIdException::class);
        $this->expectExceptionMessage("No readings available");
        PricePlanServiceTest::$pricePlanService->getConsumptionCostOfElectricityReadingsForEachPricePlan("unknown-id");
    }

    /**
     * @test
     */
    public function get_Cost_Plan_For_All_Suppliers_For_Valid_Meter_Id(){
        $costPlans = PricePlanServiceTest::$pricePlanService->getCostPlanForAllSuppliersWithCurrentSupplierDetails("smart-meter-1");
        $this->assertNotNull($costPlans);
    }

    /**
     * @test
     */
    public function get_Cost_Plan_For_All_Suppliers_Should_Throw_Exception_For_InValid_Meter_Id(){
        $this->expectException(InvalidMeterIdException::class);
        $this->expectExceptionMessage("No readings available");
        PricePlanServiceTest::$pricePlanService->getCostPlanForAllSuppliersWithCurrentSupplierDetails("unknown-id");
    }

    /**
     * @test
     */
    public function get_Cost_Plan_For_All_Suppliers_Should_Return_Plans_With_Supplier_Info(){
        $costPlans = PricePlanServiceTest::$pricePlanService->getCostPlanForAllSuppliersWithCurrentSupplierDetails("smart-meter-1");
        $supplier = end($costPlans);
        $this->assertEquals("The Green Eco", $supplier['Current Supplier']);
    }

    public static function tearDownAfterClass(): void
    {
        parent::tearDownAfterClass(); // TODO: Change the autogenerated stub
    }
}
