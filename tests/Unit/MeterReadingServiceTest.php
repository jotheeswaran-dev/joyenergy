<?php

namespace Tests\Unit;

use App\Models\MeterReadingsInitialize;
use App\Repository\ElectricityReadingRepository;
use App\Repository\PricePlanRepository;
use App\Services\MeterReadingService;
use Tests\TestCase;


class MeterReadingServiceTest extends TestCase
{
    private $meterReadingService;
    private $electricityReadingRepositoryMock;
    private $pricePlanRepositoryMock;

    protected function setUp(): void
    {
        $this->electricityReadingRepositoryMock = $this->createMock(ElectricityReadingRepository::class);
        $this->pricePlanRepositoryMock = $this->createMock(PricePlanRepository::class);

        $this->meterReadingService = new MeterReadingService($this->electricityReadingRepositoryMock,$this->pricePlanRepositoryMock);
    }

    /**
     * @test
     */
    public function should_Return_Readings_For_Valid_Meter_Id()
    {
        $expectedReadings = collect(['reading' => '0.1212312', 'time' => '2021-10-08 20:19:27']);
        $this->electricityReadingRepositoryMock->method('getElectricityReadings')->willReturn($expectedReadings);

        $actualReadings = $this->meterReadingService->getReadings("smart-meter-1");

        $this->assertEquals($expectedReadings, $actualReadings);
    }

    /**
     * @test
     */
    public function should_Return_Empty_Array_For_Invalid_Meter_Id()
    {
        $expectedReadings = collect([]);
        $this->electricityReadingRepositoryMock->method('getElectricityReadings')->willReturn($expectedReadings);

        $actualReadings = $this->meterReadingService->getReadings("unknown-id");

        $this->assertEquals($expectedReadings, $actualReadings);
    }

    /**
     * @test
     */
//    public function shouldReturnTrueIfReadingsAreInsertedForAvailableSmartMeter()
//    {
//        $this->electricityReadingRepositoryMock->method('getSmartMeterId')->willReturn(collect([1]));
//        $this->electricityReadingRepositoryMock->method('insertElectricityReadings')->willReturn(true);
//
//        $this->assertTrue($this->meterReadingService->storeReadings("smart-meter-1","supplier",['reading' => '0.1212312', 'time' => '2021-10-08 20:19:27']));
//
//    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
